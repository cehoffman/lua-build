#!/usr/bin/env bash
#
# Summary: Install a Lua version using the lua-build plugin
#
# Usage: luaenv install [-f|--force] [-k|--keep] [-v|--verbose] <version>
#        luaenv install [-f|--force] [-k|--keep] [-v|--verbose] <definition-file>
#        luaenv install -l|--list
#
#   -l/--list          List all available versions
#   -f/--force         Install even if the version appears to be installed already
#   -s/--skip-existing Skip if the version appears to be installed already
#
#   lua-build options:
#
#   -k/--keep          Keep source tree in $LUAENV_BUILD_ROOT after installation
#                      (defaults to $LUAENV_ROOT/sources)
#   -v/--verbose       Verbose mode: print compilation status to stdout
#
# For detailed information on installing Lua versions with
# lua-build, including a list of environment variables for adjusting
# compilation, see: https://github.com/sstephenson/lua-build#usage
#
set -e
[ -n "$LUAENV_DEBUG" ] && set -x

# Provide luaenv completions
if [ "$1" = "--complete" ]; then
  exec lua-build --definitions
fi

if [ -z "$LUAENV_ROOT" ]; then
  LUAENV_ROOT="${HOME}/.luaenv"
fi

# Load shared library functions
eval "$(lua-build --lib)"

usage() {
  luaenv-help install 2>/dev/null
  [ -z "$1" ] || exit "$1"
}

unset FORCE
unset SKIP_EXISTING
unset KEEP
unset VERBOSE

parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "h" | "help" )
    usage 0
    ;;
  "l" | "list" )
    echo "Available versions:"
    lua-build --definitions | sed 's/^/  /'
    exit
    ;;
  "f" | "force" )
    FORCE=true
    ;;
  "s" | "skip-existing" )
    SKIP_EXISTING=true
    ;;
  "k" | "keep" )
    [ -n "${LUAENV_BUILD_ROOT}" ] || LUAENV_BUILD_ROOT="${LUAENV_ROOT}/sources"
    ;;
  "v" | "verbose" )
    VERBOSE="-v"
    ;;
  "version" )
    exec lua-build --version
    ;;
  * )
    usage 1
    ;;
  esac
done

unset VERSION_NAME

# The first argument contains the definition to install. If the
# argument is missing, try to install whatever local app-specific
# version is specified by luaenv. Show usage instructions if a local
# version is not specified.
DEFINITION="${ARGUMENTS[0]}"
[ -n "$DEFINITION" ] || DEFINITION="$(luaenv local 2>/dev/null || true)"
[ -n "$DEFINITION" ] || usage 1


# Define `before_install` and `after_install` functions that allow
# plugin hooks to register a string of code for execution before or
# after the installation process.
declare -a before_hooks after_hooks

before_install() {
  local hook="$1"
  before_hooks["${#before_hooks[@]}"]="$hook"
}

after_install() {
  local hook="$1"
  after_hooks["${#after_hooks[@]}"]="$hook"
}

# Load plugin hooks.
for script in $(luaenv-hooks install); do
  source "$script"
done


# Set VERSION_NAME from $DEFINITION, if it is not already set. Then
# compute the installation prefix.
[ -n "$VERSION_NAME" ] || VERSION_NAME="${DEFINITION##*/}"
PREFIX="${LUAENV_ROOT}/versions/${VERSION_NAME}"

[ -d "${PREFIX}" ] && PREFIX_EXISTS=1

# If the installation prefix exists, prompt for confirmation unless
# the --force option was specified.
if [ -d "${PREFIX}/bin" ]; then
  if [ -z "$FORCE" ] && [ -z "$SKIP_EXISTING" ]; then
    echo "luaenv: $PREFIX already exists" >&2
    read -p "continue with installation? (y/N) "

    case "$REPLY" in
    y* | Y* ) ;;
    * ) exit 1 ;;
    esac
  elif [ -n "$SKIP_EXISTING" ]; then
    # Since we know the lua version is already installed, and are opting to
    # not force installation of existing versions, we just `exit 0` here to
    # leave things happy
    exit 0
  fi
fi

# If LUAENV_BUILD_ROOT is set, always pass keep options to lua-build.
if [ -n "${LUAENV_BUILD_ROOT}" ]; then
  export LUA_BUILD_BUILD_PATH="${LUAENV_BUILD_ROOT}/${VERSION_NAME}"
  KEEP="-k"
fi

# Set LUA_BUILD_CACHE_PATH to $LUAENV_ROOT/cache, if the directory
# exists and the variable is not already set.
if [ -z "${LUA_BUILD_CACHE_PATH}" ] && [ -d "${LUAENV_ROOT}/cache" ]; then
  export LUA_BUILD_CACHE_PATH="${LUAENV_ROOT}/cache"
fi


# Execute `before_install` hooks.
for hook in "${before_hooks[@]}"; do eval "$hook"; done

# Plan cleanup on unsuccessful installation.
cleanup() {
  [ -z "${PREFIX_EXISTS}" ] && rm -rf "$PREFIX"
}

trap cleanup SIGINT

# Invoke `lua-build` and record the exit status in $STATUS. Run
# `luaenv rehash` after a successful installation.
STATUS=0
lua-build $KEEP $VERBOSE "$DEFINITION" "$PREFIX" || STATUS="$?"

# Execute `after_install` hooks.
for hook in "${after_hooks[@]}"; do eval "$hook"; done

# Run `luaenv-rehash` after a successful installation.
if [ "$STATUS" == "0" ]; then
  luaenv rehash
else
  cleanup
fi

exit "$STATUS"
